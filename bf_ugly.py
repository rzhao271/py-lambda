assert ((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda cai: lambda ti: lambda ia: lambda ca: lambda tv: ca + [tv] + cai[ti + 1:] if ia == ti else (f)(cai)(ti)(ia + 1)(ca + [cai[ia]])(tv)))([0, 1, 2])(2)(0)([-5])(5) == [-5, 0, 1, 5]
assert ((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda bc: lambda abc: lambda ba: ini + 1 if cai[ci] != 0 or ba == 1 and ins[ini] == abc else (f)(ins)(cai)(ci)(ini + 1)(bc)(abc)(ba + 1 if ins[ini] == bc else ba - 1 if ins[ini] == abc else ba)))('[[]]')([1, 0, 0])(0)(0)('[')(']')(0) == 1
assert ((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda bc: lambda abc: lambda ba: ini + 1 if cai[ci] != 0 or ba == 1 and ins[ini] == abc else (f)(ins)(cai)(ci)(ini + 1)(bc)(abc)(ba + 1 if ins[ini] == bc else ba - 1 if ins[ini] == abc else ba)))('[[]]')([1, 0, 0])(0)(2)('[')(']')(0) == 3
assert ((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda bc: lambda abc: lambda ba: ini + 1 if cai[ci] != 0 or ba == 1 and ins[ini] == abc else (f)(ins)(cai)(ci)(ini + 1)(bc)(abc)(ba + 1 if ins[ini] == bc else ba - 1 if ins[ini] == abc else ba)))('[[]]')([0, 0, 0])(0)(1)('[')(']')(0) == 3
assert ((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda bc: lambda abc: lambda ba: ini + 1 if cai[ci] != 0 or ba == 1 and ins[ini] == abc else (f)(ins)(cai)(ci)(ini + 1)(bc)(abc)(ba + 1 if ins[ini] == bc else ba - 1 if ins[ini] == abc else ba)))('[[]]')([0, 0, 0])(0)(0)('[')(']')(0) == 4
assert ((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda bc: lambda abc: lambda ba: ini + 1 if cai[ci] == 0 or ba == 1 and ins[ini] == abc else (f)(ins)(cai)(ci)(ini - 1)(bc)(abc)(ba + 1 if ins[ini] == bc else ba - 1 if ins[ini] == abc else ba)))('[[]]')([0, 0, 0])(0)(3)(']')('[')(0) == 4
assert ((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda bc: lambda abc: lambda ba: ini + 1 if cai[ci] == 0 or ba == 1 and ins[ini] == abc else (f)(ins)(cai)(ci)(ini - 1)(bc)(abc)(ba + 1 if ins[ini] == bc else ba - 1 if ins[ini] == abc else ba)))('[[]]')([0, 0, 0])(0)(1)(']')('[')(0) == 2
assert ((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda bc: lambda abc: lambda ba: ini + 1 if cai[ci] == 0 or ba == 1 and ins[ini] == abc else (f)(ins)(cai)(ci)(ini - 1)(bc)(abc)(ba + 1 if ins[ini] == bc else ba - 1 if ins[ini] == abc else ba)))('[[]]')([1, 0, 0])(0)(2)(']')('[')(0) == 2
assert ((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda bc: lambda abc: lambda ba: ini + 1 if cai[ci] == 0 or ba == 1 and ins[ini] == abc else (f)(ins)(cai)(ci)(ini - 1)(bc)(abc)(ba + 1 if ins[ini] == bc else ba - 1 if ins[ini] == abc else ba)))('[[]]')([1, 0, 0])(0)(3)(']')('[')(0) == 1
assert ((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda acc_out: acc_out if ini == len(ins) else (f)(ins)(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda cai: lambda ti: lambda ia: lambda ca: lambda tv: ca + [tv] + cai[ti + 1:] if ia == ti else (f)(cai)(ti)(ia + 1)(ca + [cai[ia]])(tv)))(cai)(ci)(0)([])(cai[ci] + 1))(ci)(ini + 1)(acc_out) if ins[ini] == '+' else (f)(ins)(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda cai: lambda ti: lambda ia: lambda ca: lambda tv: ca + [tv] + cai[ti + 1:] if ia == ti else (f)(cai)(ti)(ia + 1)(ca + [cai[ia]])(tv)))(cai)(ci)(0)([])(cai[ci] - 1))(ci)(ini + 1)(acc_out) if ins[ini] == '-' else (f)(ins)(cai)(ci + 1)(ini + 1)(acc_out) if ins[ini] == '>' else (f)(ins)(cai)(ci - 1)(ini + 1)(acc_out) if ins[ini] == '<' else (f)(ins)(cai)(ci)(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda bc: lambda abc: lambda ba: ini + 1 if cai[ci] != 0 or ba == 1 and ins[ini] == abc else (f)(ins)(cai)(ci)(ini + 1)(bc)(abc)(ba + 1 if ins[ini] == bc else ba - 1 if ins[ini] == abc else ba)))(ins)(cai)(ci)(ini)('[')(']')(0))(acc_out) if ins[ini] == '[' else (f)(ins)(cai)(ci)(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda bc: lambda abc: lambda ba: ini + 1 if cai[ci] == 0 or ba == 1 and ins[ini] == abc else (f)(ins)(cai)(ci)(ini - 1)(bc)(abc)(ba + 1 if ins[ini] == bc else ba - 1 if ins[ini] == abc else ba)))(ins)(cai)(ci)(ini)(']')('[')(0))(acc_out) if ins[ini] == ']' else (f)(ins)(cai)(ci)(ini + 1)(acc_out + str(chr(cai[ci]))) if ins[ini] == '.' else (f)(ins)(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda cai: lambda ti: lambda ia: lambda ca: lambda tv: ca + [tv] + cai[ti + 1:] if ia == ti else (f)(cai)(ti)(ia + 1)(ca + [cai[ia]])(tv)))(cai)(ci)(0)([])(ord(input()[0])))(ci)(ini + 1)(acc_out) if ins[ini] == ',' else (f)(ins)(cai)(ci)(ini + 1)(acc_out)))('')([])(0)(0)('') == ''
assert ((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda acc_out: acc_out if ini == len(ins) else (f)(ins)(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda cai: lambda ti: lambda ia: lambda ca: lambda tv: ca + [tv] + cai[ti + 1:] if ia == ti else (f)(cai)(ti)(ia + 1)(ca + [cai[ia]])(tv)))(cai)(ci)(0)([])(cai[ci] + 1))(ci)(ini + 1)(acc_out) if ins[ini] == '+' else (f)(ins)(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda cai: lambda ti: lambda ia: lambda ca: lambda tv: ca + [tv] + cai[ti + 1:] if ia == ti else (f)(cai)(ti)(ia + 1)(ca + [cai[ia]])(tv)))(cai)(ci)(0)([])(cai[ci] - 1))(ci)(ini + 1)(acc_out) if ins[ini] == '-' else (f)(ins)(cai)(ci + 1)(ini + 1)(acc_out) if ins[ini] == '>' else (f)(ins)(cai)(ci - 1)(ini + 1)(acc_out) if ins[ini] == '<' else (f)(ins)(cai)(ci)(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda bc: lambda abc: lambda ba: ini + 1 if cai[ci] != 0 or ba == 1 and ins[ini] == abc else (f)(ins)(cai)(ci)(ini + 1)(bc)(abc)(ba + 1 if ins[ini] == bc else ba - 1 if ins[ini] == abc else ba)))(ins)(cai)(ci)(ini)('[')(']')(0))(acc_out) if ins[ini] == '[' else (f)(ins)(cai)(ci)(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda bc: lambda abc: lambda ba: ini + 1 if cai[ci] == 0 or ba == 1 and ins[ini] == abc else (f)(ins)(cai)(ci)(ini - 1)(bc)(abc)(ba + 1 if ins[ini] == bc else ba - 1 if ins[ini] == abc else ba)))(ins)(cai)(ci)(ini)(']')('[')(0))(acc_out) if ins[ini] == ']' else (f)(ins)(cai)(ci)(ini + 1)(acc_out + str(chr(cai[ci]))) if ins[ini] == '.' else (f)(ins)(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda cai: lambda ti: lambda ia: lambda ca: lambda tv: ca + [tv] + cai[ti + 1:] if ia == ti else (f)(cai)(ti)(ia + 1)(ca + [cai[ia]])(tv)))(cai)(ci)(0)([])(ord(input()[0])))(ci)(ini + 1)(acc_out) if ins[ini] == ',' else (f)(ins)(cai)(ci)(ini + 1)(acc_out)))('++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.')([0]*10)(0)(0)('') == 'Hello World!\n'
print(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda acc_out: acc_out if ini == len(ins) else (f)(ins)(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda cai: lambda ti: lambda ia: lambda ca: lambda tv: ca + [tv] + cai[ti + 1:] if ia == ti else (f)(cai)(ti)(ia + 1)(ca + [cai[ia]])(tv)))(cai)(ci)(0)([])(cai[ci] + 1))(ci)(ini + 1)(acc_out) if ins[ini] == '+' else (f)(ins)(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda cai: lambda ti: lambda ia: lambda ca: lambda tv: ca + [tv] + cai[ti + 1:] if ia == ti else (f)(cai)(ti)(ia + 1)(ca + [cai[ia]])(tv)))(cai)(ci)(0)([])(cai[ci] - 1))(ci)(ini + 1)(acc_out) if ins[ini] == '-' else (f)(ins)(cai)(ci + 1)(ini + 1)(acc_out) if ins[ini] == '>' else (f)(ins)(cai)(ci - 1)(ini + 1)(acc_out) if ins[ini] == '<' else (f)(ins)(cai)(ci)(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda bc: lambda abc: lambda ba: ini + 1 if cai[ci] != 0 or ba == 1 and ins[ini] == abc else (f)(ins)(cai)(ci)(ini + 1)(bc)(abc)(ba + 1 if ins[ini] == bc else ba - 1 if ins[ini] == abc else ba)))(ins)(cai)(ci)(ini)('[')(']')(0))(acc_out) if ins[ini] == '[' else (f)(ins)(cai)(ci)(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda ins: lambda cai: lambda ci: lambda ini: lambda bc: lambda abc: lambda ba: ini + 1 if cai[ci] == 0 or ba == 1 and ins[ini] == abc else (f)(ins)(cai)(ci)(ini - 1)(bc)(abc)(ba + 1 if ins[ini] == bc else ba - 1 if ins[ini] == abc else ba)))(ins)(cai)(ci)(ini)(']')('[')(0))(acc_out) if ins[ini] == ']' else (f)(ins)(cai)(ci)(ini + 1)(acc_out + str(chr(cai[ci]))) if ins[ini] == '.' else (f)(ins)(((lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v)))))((lambda f: lambda cai: lambda ti: lambda ia: lambda ca: lambda tv: ca + [tv] + cai[ti + 1:] if ia == ti else (f)(cai)(ti)(ia + 1)(ca + [cai[ia]])(tv)))(cai)(ci)(0)([])(ord(input()[0])))(ci)(ini + 1)(acc_out) if ins[ini] == ',' else (f)(ins)(cai)(ci)(ini + 1)(acc_out)))('++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.')([0]*10)(0)(0)(''))
