
binsearch = lambda f: lambda arr: lambda elem: (lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v))))(lambda f: lambda arr: lambda elem: lambda left: lambda right: ((left + right) // 2) if arr[((left + right) // 2)] == elem else -1 if left >= right else f(arr)(elem)(((left + right) // 2) + 1)(right) if arr[((left + right) // 2)] < elem else f(arr)(elem)(left)(((left + right) // 2) - 1))(arr)(elem)(0)(len(arr))

assert (lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v))))(lambda f: lambda arr: lambda elem: (lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v))))(lambda f: lambda arr: lambda elem: lambda left: lambda right: ((left + right) // 2) if arr[((left + right) // 2)] == elem else -1 if left >= right else f(arr)(elem)(((left + right) // 2) + 1)(right) if arr[((left + right) // 2)] < elem else f(arr)(elem)(left)(((left + right) // 2) - 1))(arr)(elem)(0)(len(arr)))([3, 5, 7, 8, 9])(5) == 1
assert (lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v))))(lambda f: lambda arr: lambda elem: (lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v))))(lambda f: lambda arr: lambda elem: lambda left: lambda right: ((left + right) // 2) if arr[((left + right) // 2)] == elem else -1 if left >= right else f(arr)(elem)(((left + right) // 2) + 1)(right) if arr[((left + right) // 2)] < elem else f(arr)(elem)(left)(((left + right) // 2) - 1))(arr)(elem)(0)(len(arr)))([3, 5, 7, 8, 9])(8) == 3
assert (lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v))))(lambda f: lambda arr: lambda elem: (lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v))))(lambda f: lambda arr: lambda elem: lambda left: lambda right: ((left + right) // 2) if arr[((left + right) // 2)] == elem else -1 if left >= right else f(arr)(elem)(((left + right) // 2) + 1)(right) if arr[((left + right) // 2)] < elem else f(arr)(elem)(left)(((left + right) // 2) - 1))(arr)(elem)(0)(len(arr)))([3, 5, 7, 8, 9])(3) == 0
assert (lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v))))(lambda f: lambda arr: lambda elem: (lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v))))(lambda f: lambda arr: lambda elem: lambda left: lambda right: ((left + right) // 2) if arr[((left + right) // 2)] == elem else -1 if left >= right else f(arr)(elem)(((left + right) // 2) + 1)(right) if arr[((left + right) // 2)] < elem else f(arr)(elem)(left)(((left + right) // 2) - 1))(arr)(elem)(0)(len(arr)))([3, 5, 7, 8, 9])(9) == 4
assert (lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v))))(lambda f: lambda arr: lambda elem: (lambda f: (lambda x: f(lambda v: x(x)(v)))(lambda x: f(lambda v: x(x)(v))))(lambda f: lambda arr: lambda elem: lambda left: lambda right: ((left + right) // 2) if arr[((left + right) // 2)] == elem else -1 if left >= right else f(arr)(elem)(((left + right) // 2) + 1)(right) if arr[((left + right) // 2)] < elem else f(arr)(elem)(left)(((left + right) // 2) - 1))(arr)(elem)(0)(len(arr)))([3, 5, 7, 8, 9])(6) == -1
